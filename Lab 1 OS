class Process:
    def __init__(self, pid, arrival_time, burst_time):
        self.pid = pid  # Идентификатор процесса
        self.arrival_time = arrival_time  # Время прибытия
        self.burst_time = burst_time  # Время выполнения
        self.waiting_time = 0  # Время ожидания
        self.turnaround_time = 0  # Время выполнения с ожиданием

def fcfs_scheduling(processes):
    # Сортируем процессы по времени прибытия
    processes.sort(key=lambda x: x.arrival_time)
    current_time = 0
    for process in processes:
        # Если процесс пришел раньше, чем предыдущий завершился
        if current_time < process.arrival_time:
            current_time = process.arrival_time
        process.waiting_time = current_time - process.arrival_time
        process.turnaround_time = process.waiting_time + process.burst_time
        current_time += process.burst_time

def sjf_scheduling(processes):
    # Сортируем процессы по времени прибытия, затем по времени выполнения
    processes.sort(key=lambda x: (x.arrival_time, x.burst_time))
    current_time = 0
    completed = 0
    n = len(processes)
    is_completed = [False] * n
    
    while completed != n:
        idx = -1
        min_burst_time = float('inf')
        for i in range(n):
            if processes[i].arrival_time <= current_time and not is_completed[i]:
                if processes[i].burst_time < min_burst_time:
                    min_burst_time = processes[i].burst_time
                    idx = i
                if processes[i].burst_time == min_burst_time:
                    if processes[i].arrival_time < processes[idx].arrival_time:
                        idx = i
        if idx != -1:
            process = processes[idx]
            process.waiting_time = current_time - process.arrival_time
            process.turnaround_time = process.waiting_time + process.burst_time
            current_time += process.burst_time
            is_completed[idx] = True
            completed += 1
        else:
            current_time += 1

# Пример данных
processes = [
    Process(1, 0, 5),
    Process(2, 1, 3),
    Process(3, 2, 8),
    Process(4, 3, 6)
]

# Планирование FCFS
print("FCFS Scheduling")
fcfs_scheduling(processes)
for p in processes:
    print(f"Process {p.pid}: Waiting Time: {p.waiting_time}, Turnaround Time: {p.turnaround_time}")

# Планирование SJF
print("\nSJF Scheduling")
sjf_scheduling(processes)
for p in processes:
    print(f"Process {p.pid}: Waiting Time: {p.waiting_time}, Turnaround Time: {p.turnaround_time}")
